!function(t){"use strict";function e(t,e){t=String(t).replace(/[^\dk]+/gi,"");var r=t.substr(-1,1),n=t.substr(0,t.length-1).replace(/\D+/g,"");return e?[n,r]:n+r}function r(t){if(t=e(t),t.length<3)return t;var r=e(t,!0);return r[0]=r[0].replace(/(\d)(?=(\d{3})+\b)/g,"$1."),r.join("-")}function n(t){if(!t||!String(t).length)return!0;var r=e(t,!0),n="k",u=0,i=1;for(isNaN(r[1])&&(r[1]=n);r[0];r[0]=Math.floor(Number(r[0])/10))i=(i+r[0]%10*(9-u++%6))%11;return i?String(i-1)===r[1]:n===r[1]}t.module("ngRut",[]).factory("ngRut",function(){return{validate:n,format:r,clean:e}}).directive("ngRut",["$log",function(t){return{restrict:"A",require:"ngModel",link:function(u,i,a,o){return"INPUT"!==i[0].tagName?void t.error("NG-RUT: This directive must be used on INPUT elements only and element is "+i[0].tagName+"."):o?(o.$formatters.unshift(function(t){return o.$setValidity("rut",n(t)),r(o.$modelValue)}),void o.$parsers.unshift(function(t){return o.$setValidity("rut",n(t)),o.$setViewValue(r(t)),o.$render(),e(t)})):void t.warn("NG-RUT: No ngModel associated to the input element")}}}]).filter("ngRut",function(){return function(t,u){switch(u){case"validate":return n(t);case"clean":return e(t);default:return r(t)}}})}(angular);
//# sourceMappingURL=data:application/json;base64,